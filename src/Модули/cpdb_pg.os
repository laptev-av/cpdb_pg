#Использовать 1commands
#Использовать fs	
#Использовать strings
#Использовать logos

Перем Лог;

// Инициализация параметров 
//
Функция ИнициализацияПараметров_PG() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("pg_path_bin", "C:\Program Files\PostgreSQL 1C\13\bin");
	
	СтруктураПараметров.Вставить("PGUSER", "postgres");
	СтруктураПараметров.Вставить("PGPASSWORD", "postgres");
	
	СтруктураПараметров.Вставить("host", "vm-srv-cen");
	СтруктураПараметров.Вставить("port", "5432");
	СтруктураПараметров.Вставить("jobs", "8");
	
	Возврат СтруктураПараметров; 
КонецФункции

// Dump 
// 
// Параметры:
//		БД_Имя - имя ИБ для дампа
//		Архив_ПолныйПуть - папка для выгрузки архива ИБ
Процедура PG_Dump(Знач БД_Имя, Знач Архив_ПолныйПуть, Знач Параметры_PG, Отказ) Экспорт
	
	Лог.Информация("PG_Dump: %1", БД_Имя);

	Лог.Отладка("ПолныйПуть: %1", Архив_ПолныйПуть);

	ФС.ОбеспечитьПустойКаталог(Архив_ПолныйПуть);
	
	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.Создать();
	КомандныйФайл.ПоказыватьВыводНемедленно(Ложь);
	
	КомандныйФайл_ДобавитьПеременныеСреды(КомандныйФайл, Параметры_PG);
	
	Команда_Шаблон = """[pg_path_bin]\pg_dump.exe"""
	+ " --host=[host]"
	+ " --port=[port]"
	+ " --username=[PGUSER]"
	+ " --role=[PGUSER]"
	+ " --no-password"
	+ " --jobs=[jobs]"
	+ " --format=directory"
	+ " --encoding=UTF8"
	+ " --blobs"
	+ " --verbose"
	+ " --file=[Архив_ПолныйПуть]"
	+ " [Имя_БД]";

    Параметры_PG.Вставить("Имя_БД", БД_Имя);
    Параметры_PG.Вставить("Архив_ПолныйПуть", Архив_ПолныйПуть);
	    
	Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	

	КодВозврата = КомандныйФайл.Исполнить();

	Лог.Отладка("КодВозврата: %1", КодВозврата);
	Лог.Отладка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	
	Если КодВозврата <> 0 Тогда
		Отказ = Истина;
		Лог.Ошибка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	КонецЕсли;	
	
	Лог.Отладка("PG_Dump_Архив_Стоп: %1", БД_Имя);
КонецПроцедуры

Процедура PG_Restore(БД_Имя, Архив_ПолныйПуть, Параметры_PG, Отказ) Экспорт

	ВыполнитьRestore_dropdb(БД_Имя, Параметры_PG, Отказ);
	ВыполнитьRestore_createdb(БД_Имя, Параметры_PG, Отказ);
	
	Лог.Информация("PG_Restore: %1", БД_Имя);
	Лог.Отладка("ПолныйПуть: %1", Архив_ПолныйПуть);

	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.Создать();
	КомандныйФайл.ПоказыватьВыводНемедленно(Ложь);

	КомандныйФайл_ДобавитьПеременныеСреды(КомандныйФайл, Параметры_PG);

	Команда_Шаблон = """[pg_path_bin]\pg_restore.exe"""
	+ " --host ""[host]"""
	+ " --port [port]"
	+ " --username ""[PGUSER]"""
	+ " --role ""[PGUSER]"""
	+ " --dbname ""[БД_Имя]"""
	+ " --no-password"
	+ " --jobs=[jobs]"
	+ " --verbose"
	+ " ""[Архив_ПолныйПуть]""";

	Параметры_PG.Вставить("Архив_ПолныйПуть", Архив_ПолныйПуть);
	Параметры_PG.Вставить("БД_Имя", БД_Имя);

	Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	
	
	КодВозврата = КомандныйФайл.Исполнить();

	Лог.Отладка("КодВозврата: %1", КодВозврата);
	Лог.Отладка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());

	Если КодВозврата <> 0 Тогда
		Отказ = Истина;
		Лог.Ошибка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	КонецЕсли;	
	
	Лог.Отладка("PG_Restore_Стоп: %1", БД_Имя);
	
КонецПроцедуры

Процедура ВыполнитьRestore_dropdb(БД_Имя, Параметры_PG, Отказ) 

	Лог.Информация("Restore_dropdb: %1", БД_Имя);
	
	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.Создать();
	КомандныйФайл.ПоказыватьВыводНемедленно(Ложь);

	КомандныйФайл_ДобавитьПеременныеСреды(КомандныйФайл, Параметры_PG);

	Команда_Шаблон = """[pg_path_bin]\psql.exe"""
	+ " --host ""[host]"""
	+ " --port [port]"
	+ " --username ""[PGUSER]"""
	+ " --no-password"
	+ " --dbname=""[БД_Имя]"""
	+ " --command"
	+ " ""SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity "
	+ "WHERE pg_stat_activity.datname  = '[БД_Имя]' AND pid <> pg_backend_pid();""";

	Параметры_PG.Вставить("БД_Имя", БД_Имя);

	Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	

	Команда_Шаблон = """[pg_path_bin]\dropdb.exe"""
	+" --host ""[host]"""
	+" --port [port]"
	+" --username ""[PGUSER]"""
	+" --if-exists"
	+" --no-password"
	+" --echo"
	+" ""[БД_Имя]""";

	Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	
	
	КодВозврата = КомандныйФайл.Исполнить();

	Лог.Отладка("КодВозврата: %1", КодВозврата);
	Лог.Отладка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());

	Если КодВозврата <> 0 Тогда
		Отказ = Истина;
		Лог.Ошибка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	КонецЕсли;	
	
	Лог.Отладка("Restore_dropdb_Стоп: %1", БД_Имя);
	
КонецПроцедуры

Процедура ВыполнитьRestore_createdb(БД_Имя, Параметры_PG, Отказ) 

	Лог.Информация("Restore_createdb: %1", БД_Имя);

	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.Создать();
	КомандныйФайл.ПоказыватьВыводНемедленно(Ложь);

	КомандныйФайл_ДобавитьПеременныеСреды(КомандныйФайл, Параметры_PG);


	Команда_Шаблон = """[pg_path_bin]\createdb.exe"""
	+ " --host ""[host]"""
	+ " --port [port]"
	+ " --username ""[PGUSER]"""
	+ " --no-password"
	+ " --echo"
	+ " --owner=""[PGUSER]"""
	+ " --encoding=""UTF8"""
	+ " --locale=""ru_RU.UTF-8"""
	+ " --tablespace=""pg_default"""
	+ " ""[БД_Имя]""";

	Параметры_PG.Вставить("БД_Имя", БД_Имя);

	Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	
	
	КодВозврата = КомандныйФайл.Исполнить();

	Лог.Отладка("КодВозврата: %1", КодВозврата);
	Лог.Отладка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());

	Если КодВозврата <> 0 Тогда
		Отказ = Истина;
		Лог.Ошибка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	КонецЕсли;	
	
	Лог.Отладка("Restore_createdb_Стоп: %1", БД_Имя);
	
КонецПроцедуры

Процедура КомандныйФайл_ДобавитьПеременныеСреды(КомандныйФайл, Параметры_PG)
	
	Команда_Строкой = "@echo off";
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	

	Команда_Шаблон = "SET PGUSER=[PGUSER]";
	Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	
	
	Команда_Шаблон = "SET PGPASSWORD=[PGPASSWORD]";
	Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	

КонецПроцедуры

Процедура ВыполнитьDataDump(БД_Имя, Архив_Путь, Параметры_PG, Лог, Отказ)
	
	Лог.Информация("DataDump_Архив_Пуск: %1", БД_Имя);

    Архив_ПолныйПуть = ОбъединитьПути(Архив_Путь, БД_Имя, "_data"); 
	Лог.Отладка("ПолныйПуть: %1", Архив_ПолныйПуть);

	ФС.ОбеспечитьПустойКаталог(Архив_ПолныйПуть);
	
	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.Создать();
	КомандныйФайл.ПоказыватьВыводНемедленно(Ложь);
	
	КомандныйФайл_ДобавитьПеременныеСреды(КомандныйФайл, Параметры_PG);
	
	Команда_Шаблон = """[pg_path_bin]\pg_dump.exe"""
	+ " --host=[host]"
	+ " --port=[port]"
	+ " --username=[PGUSER]"
	+ " --role=[PGUSER]"
	+ " --no-password"
	+ " --jobs=[jobs]"
	+ " --format=directory"
	+ " --encoding=UTF8"
	+ " --blobs"
	+ " --verbose"
	+ " --exclude-table-data=config"
	+ " --file=[Архив_ПолныйПуть]"
	+ " [Имя_БД]";

    Параметры_PG.Вставить("Имя_БД", БД_Имя);
    Параметры_PG.Вставить("Архив_ПолныйПуть", Архив_ПолныйПуть);
	    
	Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	

	КодВозврата = КомандныйФайл.Исполнить();

	Лог.Отладка("КодВозврата: %1", КодВозврата);
	Лог.Отладка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	
	Если КодВозврата <> 0 Тогда
		Отказ = Истина;
		Лог.Ошибка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	КонецЕсли;	
	
	Лог.Информация("DataDump_Архив_Стоп: %1", БД_Имя);
КонецПроцедуры

Процедура ВыполнитьConfDump(БД_Имя, Архив_Путь, Параметры_PG, Лог, Отказ)

	Лог.Информация("ConfDump_Архив_Пуск: %1", БД_Имя);

    Архив_ПолныйПуть = ОбъединитьПути(Архив_Путь, БД_Имя, "_conf"); 
	Лог.Отладка("ПолныйПуть: %1", Архив_ПолныйПуть);

	ФС.ОбеспечитьПустойКаталог(Архив_ПолныйПуть);
	
	КомандныйФайл = Новый КомандныйФайл;
	КомандныйФайл.Создать();
	
	КомандныйФайл_ДобавитьПеременныеСреды(КомандныйФайл, Параметры_PG);
	
	Архив_ПолныйПуть_Conf = СтрЗаменить(Архив_ПолныйПуть, "\", "\\") + "\\config";

	Команда_Шаблон = """[pg_path_bin]\psql.exe"""
	+ " --host ""[host]"""
	+ " --port [port]"
	+ " --username ""[PGUSER]"""
	+ " --no-password"
	+ " --command ""COPY public.config TO '[Архив_ПолныйПуть_Conf]' WITH BINARY;"""
	+ " --dbname=""[БД_Имя]""";

	Параметры_PG.Вставить("Архив_ПолныйПуть_Conf", Архив_ПолныйПуть_Conf);
	Параметры_PG.Вставить("БД_Имя", БД_Имя);

    Команда_Строкой = СтроковыеФункции.ВставитьПараметрыВСтроку(Команда_Шаблон, Параметры_PG);
	Лог.Отладка("ДобавитьКоманду: %1", Команда_Строкой);
	КомандныйФайл.ДобавитьКоманду(Команда_Строкой);	

	КодВозврата = КомандныйФайл.Исполнить();
		
	Лог.Отладка("КодВозврата: %1", КодВозврата);
	Лог.Отладка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	
	Если КодВозврата <> 0 Тогда
		Отказ = Истина;
		Лог.Ошибка("ПолучитьВывод: %1", КомандныйФайл.ПолучитьВывод());
	КонецЕсли;	
	
	Лог.Информация("ConfDump_Архив_Стоп: %1", БД_Имя);

КонецПроцедуры

Процедура ВыполнитьDataConf_Dump(БД_Имя, Архив_Путь, Отказ = Неопределено, УровеньЛога = Неопределено)
	
	Отказ_Dump = Ложь;
	Отказ_Conf = Ложь;

	Если УровеньЛога = Неопределено Тогда
		УровеньЛога = УровниЛога.Информация;
	КонецЕсли;

	Лог = Логирование.ПолучитьЛог("lv_oscript.pg_backup");
	Лог.УстановитьРаскладку(ЭтотОбъект);
	Лог.УстановитьУровень(УровеньЛога);

    Параметры_PG = ИнициализацияПараметров_PG();

	ВыполнитьDataDump(БД_Имя, Архив_Путь, Параметры_PG, Лог, Отказ_Dump);

	Если НЕ Отказ_Dump Тогда
		ВыполнитьConfDump(БД_Имя, Архив_Путь, Параметры_PG, Лог, Отказ_Conf);
	КонецЕсли;	

	Если Отказ_Dump Тогда
		Лог.Ошибка("ConfDump_Архив_Отказ: Ошибка формирования архива Data %1", БД_Имя);
	КонецЕсли;
	Если Отказ_Conf Тогда
		Лог.Ошибка("ConfDump_Архив_Отказ: Ошибка формирования архива Conf %1", БД_Имя);
	КонецЕсли;

	Если Отказ_Dump ИЛИ Отказ_Conf Тогда
		Отказ = Истина;
	КонецЕсли;	
	Лог.Закрыть();
КонецПроцедуры	


// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

    Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

Процедура УстановитьУровеньЛога(УровеньЛога = Неопределено) Экспорт
	Если УровеньЛога = Неопределено Тогда
		УровеньЛога = УровниЛога.Информация;		
	КонецЕсли;
	Лог.УстановитьУровень(УровеньЛога);	
КонецПроцедуры
Процедура УстановитьУровеньЛогаОтладка() Экспорт
	Лог.УстановитьУровень(УровниЛога.Отладка);	
КонецПроцедуры

УровеньЛога = УровниЛога.Информация;
Лог = Логирование.ПолучитьЛог("oscript.pg_db");
Лог.УстановитьРаскладку(ЭтотОбъект);
Лог.УстановитьУровень(УровеньЛога);
